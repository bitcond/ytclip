const express = require('express');
const cors = require('cors');
const { YoutubeTranscript } = require('youtube-transcript');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const { transcribe } = require('./whisperService');

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors({ origin: '*' }));
app.use(express.json());

app.get('/', (req, res) => {
  res.send('YouTube Transcript Backend is running ðŸš€');
});

app.get('/api/transcript', async (req, res) => {
  const videoUrl = req.query.url;
  if (!videoUrl) {
    return res.status(400).json({ error: 'Video URL is required.' });
  }

  try {
    let transcriptParts;

    // Try captions first
    try {
      transcriptParts = await YoutubeTranscript.fetchTranscript(videoUrl, { lang: 'en' });
    } catch {
      console.log('No English captions, trying auto-generated...');
      try {
        transcriptParts = await YoutubeTranscript.fetchTranscript(videoUrl, { lang: 'en', autoGenerated: true });
      } catch {
        transcriptParts = null;
      }
    }

    if (transcriptParts && transcriptParts.length > 0) {
      const formattedTranscript = transcriptParts
        .map(part => {
          const minutes = Math.floor(part.offset / 60);
          const seconds = Math.floor(part.offset % 60).toString().padStart(2, '0');
          return `(${minutes}:${seconds}) ${part.text}`;
        })
        .join('\n');
      return res.json({ transcript: formattedTranscript });
    }

    // Fallback to Whisper STT
    console.log('Falling back to speech-to-text...');
    const audioFile = path.join(__dirname, 'temp_audio.mp3');

    await new Promise((resolve, reject) => {
      exec(`yt-dlp -f bestaudio --extract-audio --audio-format mp3 -o "${audioFile}" "${videoUrl}"`, (err) => {
        if (err) return reject(err);
        resolve();
      });
    });

    const sttTranscript = await transcribe(audioFile);
    fs.unlinkSync(audioFile);

    return res.json({ transcript: sttTranscript });
  } catch (error) {
    console.error('Failed to fetch transcript:', error.message);
    res.status(500).json({
      error: 'Failed to fetch transcript from captions or STT.'
    });
  }
});

app.listen(PORT, () => {
  console.log(`Transcript server listening at http://localhost:${PORT}`);
});

